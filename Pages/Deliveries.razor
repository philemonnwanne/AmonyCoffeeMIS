@inject AppDbContext _dbContext;
@inject IDialogService _dialogService;

@page "/deliveries"

<PageTitle>Deliveries</PageTitle>

<MudPaper Class="pa-1 my-2" Elevation="0">
    <div class="headings mb-2 d-flex" Style="Width: 100%">
        <MudText Typo="Typo.h4">
            @FarmerName Deliveries
        </MudText>
        
        @if (FarmerId.HasValue)
        {
            <MudSpacer />
            <MudItem>
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" @onclick="(e => AddDelivery(FarmerId.Value))">Add Delivery</MudButton>
            </MudItem>
        }
    </div>

    <MudTable Items="@deliveries" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
              ServerData="@(new Func<TableState, Task<TableData<Delivery>>>(ServerReload))">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Amount</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Date">@context.DeliveryDateTime.ToString("d")</MudTd>
            <MudTd DataLabel="Name">@context.Farmer?.Name</MudTd>
            <MudTd DataLabel="@nameof(context.Quantity)">@context.Quantity.ToString("N0")</MudTd>
            <MudTd DataLabel="@nameof(context.Price)">UGX @context.Price.ToString("N0")</MudTd>
            <MudTd DataLabel="@nameof(context.Amount)">
                UGX @context.Amount.ToString("N0")
            </MudTd>
            <MudTd>
                <MudGrid>
                    <MudItem>
                        <MudIconButton Class="p-0" Icon="@Icons.Filled.Edit" Color="Color.Primary" Size="Size.Small" @onclick="(e => UpdateDelivery(context))" />
                    </MudItem>
                    <MudItem>
                        <MudIconButton Class="p-0" Icon="@Icons.Filled.Delete" Color="Color.Error" Size="Size.Small" @onclick="(e => DeleteDelivery(context))" />
                    </MudItem>
                </MudGrid>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No Deliveries found.</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>



@code {
    [Parameter, SupplyParameterFromQuery]
    public int? FarmerId { get; set; }

    string? FarmerName;

    bool _loading = false;

    private int totalItems;

    List<Delivery> deliveries = new List<Delivery>();

    private async Task<TableData<Delivery>> ServerReload(TableState state)
    {
        var query = DeliveryQuery();

        deliveries = await query.Skip(state.PageSize * state.Page).Take(state.PageSize).ToListAsync();

        return new TableData<Delivery>
        {
            TotalItems = await query.CountAsync(),
            Items = deliveries
        };
    }

    private IQueryable<Delivery> DeliveryQuery()
    {
        IQueryable<Delivery> query = _dbContext.Deliveries.Include(x => x.Farmer);

        if (FarmerId.HasValue) query = query.Where(x => x.FarmerId == this.FarmerId);

        return query;
    }

    private async Task UpdateDelivery(Delivery delivery)
    {
        var paremeters = new DialogParameters();
        paremeters.Add(nameof(Delivery), delivery);

        var dialog = await OpenDialog<AddUpdateDeliveryDialog>("Update Delivery", paremeters);

        if (dialog.Data != null)
        {
            Delivery updatedDelivery = dialog.Data as Delivery;
            _dbContext.Deliveries.Update(updatedDelivery);

            await _dbContext.SaveChangesAsync();
        }
    }

    private async Task DeleteDelivery(Delivery delivery)
    {
        bool? result = await _dialogService.ShowMessageBox("Delete Confirmation",
            "Deleting can not be undone!", yesText: "Delete!", cancelText: "Cancel");

        if (result ?? false)
        {
            await _dbContext.Deliveries.Where(x => x.Id == delivery.Id).ExecuteDeleteAsync();
            //await _dbContext.SaveChangesAsync();

            deliveries.Remove(delivery);
        }
    }

    private async Task<DialogResult> OpenDialog<T>(string title, DialogParameters? parameters) where T : ComponentBase
    {
        var dialog = await _dialogService.Show<T>(title, parameters).Result;

        return dialog;
    }


    private async Task AddDelivery(int farmerId)
    {
        var paremeters = new DialogParameters();
        paremeters.Add(nameof(Delivery), new Delivery
            {
                FarmerId = farmerId
            });

        var dialog = await OpenDialog<AddUpdateDeliveryDialog>("Add Delivery", paremeters);

        if (dialog.Data != null)
        {
            Delivery delivery = dialog.Data as Delivery;
            _dbContext.Deliveries.Add(delivery);

            await _dbContext.SaveChangesAsync();

            deliveries.Add(delivery);
        }

    }
}
