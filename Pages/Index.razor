@page "/"
@inject AppDbContext _dbContext;
@inject IDialogService _dialogService;
@inject NavigationManager _navigationManager;

<PageTitle>Farmers</PageTitle>

<MudPaper Class="pa-1 my-2" Elevation="0">
    
    <div class="headings mb-2 d-flex" Style="Width: 100%">
        <MudText Typo="Typo.h4">
            Farmers
        </MudText>
        <MudSpacer />
        <MudItem>
            <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" @onclick="(e => CreateAsync())">Add Farmer</MudButton>
        </MudItem>
    </div>

    <MudTable Items="@farmers" Hover="true" Bordered="true" Virtualize="true" AllowUnsorted="false"
              HorizontalScrollbar="true" OnRowClick="RowClickEvent" T="Farmer"
              ServerData="@(new Func<TableState, Task<TableData<Farmer>>>(ServerReload))" @ref="_table">
        <ToolBarContent>
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search farmer name" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="Filter(m => m.Id)">Farmer Id</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="Filter(m => m.Name)">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="Filter(m => m.Gender)">Gender</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="Filter(m => m.Age)">@nameof(Farmer.Age)</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="Filter(m => m.Location)">Location</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="Filter(m => m.Id)">Actions</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="FarmerId" Style="text-align:center">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Gender">@context.Gender</MudTd>
            <MudTd DataLabel="@nameof(Farmer.Age)" Style="text-align:right">
                @context.Age
            </MudTd>
            <MudTd DataLabel="Location">@context.Location</MudTd>
            <MudTd DataLabel="Actions">
                <MudGrid>
                    <MudItem>
                        <MudIconButton Class="p-0" Icon="@Icons.Filled.AddShoppingCart" Size="Size.Small" Color="Color.Secondary" @onclick="(e => AddDelivery(context.Id))" />
                    </MudItem>
                    <MudItem>
                        <MudIconButton Class="p-0" Icon="@Icons.Filled.Edit" Size="Size.Small" Color="Color.Primary" @onclick="(e => UpdateAsync(context.Id))" />
                    </MudItem>
                    <MudItem>
                        <MudIconButton Class="p-0" Icon="@Icons.Filled.Delete" Size="Size.Small" Color="Color.Error" @onclick="(e => DeleteAsync(context.Id))" />
                    </MudItem>
                </MudGrid>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No Farmers found.</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 100 }" />
        </PagerContent>
    </MudTable>

</MudPaper>
    


@code {
    List<Farmer> farmers = new List<Farmer>();

    private MudTable<Farmer> _table;
    private string searchString = null;
    private int totalItems;

    private async Task<TableData<Farmer>> ServerReload(TableState state)
    {
        IQueryable<Farmer> query = _dbContext.Farmer;

        if (!string.IsNullOrEmpty(searchString))
        {
            query = query.Where(x => EF.Functions.Like(x.Name, $"%{searchString}%"));
        }

        farmers = await query.Skip(state.PageSize * state.Page).Take(state.PageSize).ToListAsync();
        totalItems = await query.CountAsync();
        return new TableData<Farmer>
        {
            TotalItems = totalItems,
            Items = farmers
        };
    }


    private void OnSearch(string text)
    {
        searchString = text;
        _table.ReloadServerData();
    }

    private async Task CreateAsync()
    {
        var parameters = new DialogParameters();
        parameters.Add("farmer", new Farmer());
        var dialog = await OpenDialog<AddOrUpdateFarmerDialog>("Create Farmer", parameters); // await _dialogService.Show<AddOrUpdateFarmerDialog>("Create A Item", parameters).Result;

        if (dialog.Data != null)
        {
            Farmer newFarmer = dialog.Data as Farmer;
            _dbContext.Farmer.Add(newFarmer);
            await _dbContext.SaveChangesAsync();


            farmers.Insert(0, newFarmer);
        }
    }

    private async Task UpdateAsync(int id)
    {
        var parameters = new DialogParameters();
        var farmerNeedToUpdate = farmers.FirstOrDefault(_ => _.Id == id);
        parameters.Add("farmer", farmerNeedToUpdate);
        var dialog = await OpenDialog<AddOrUpdateFarmerDialog>("Update Farmer", parameters); // _dialogService.Show<AddOrUpdateFarmerDialog>("Update A Item", parameters).Result;
        if (dialog.Data != null)
        {
            var updatedFarmer = dialog.Data as Farmer;
            _dbContext.Farmer.Update(updatedFarmer);
            await _dbContext.SaveChangesAsync();

            farmers.Remove(farmerNeedToUpdate);
            farmers.Insert(0, updatedFarmer);
        }
    }

    private async Task DeleteAsync(int id)
    {
        bool? result = await _dialogService.ShowMessageBox("Delete Confirmation",
            "Deleting can not be undone!", yesText: "Delete!", cancelText: "Cancel");

        if (result ?? false)
        {
            var farmerToRemove = await _dbContext.Farmer.FindAsync(id);
            _dbContext.Farmer.Remove(farmerToRemove);
            await _dbContext.SaveChangesAsync();

            farmers.Remove(farmerToRemove);
        }
    }

    private async Task AddDelivery(int farmerId)
    {
        var paremeters = new DialogParameters();
        paremeters.Add(nameof(Delivery), new Delivery
            {
                FarmerId = farmerId
            });

        var dialog = await OpenDialog<AddUpdateDeliveryDialog>("Add Delivery", paremeters);

        if(dialog.Data != null)
        {
            Delivery delivery = dialog.Data as Delivery;
            _dbContext.Deliveries.Add(delivery);

            await _dbContext.SaveChangesAsync();
        }
    }

    private async Task<DialogResult> OpenDialog<T>(string title, DialogParameters? parameters) where T: ComponentBase
    {
        var dialog = await _dialogService.Show<T>(title, parameters).Result;

        return dialog;
    }

    private void RowClickEvent(TableRowClickEventArgs<Farmer> e)
    {
        Console.WriteLine(e.Item);

        _navigationManager.NavigateTo($"deliveries?farmerId={e.Item.Id}");
    }

    private Func<Farmer, object?> Filter(Func<Farmer, object?> selector)
    {
        return new Func<Farmer, object?>(selector);
    }
}
